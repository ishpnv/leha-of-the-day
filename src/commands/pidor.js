const models = require("../../models");

const handleFagCommand = async (chatId, user, bot) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–∏–¥–æ—Ä –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è
    const dailyFag = await models.Daily.findOne({
      where: { chatId, role: "fag" },
    });

    if (dailyFag) {
      const lastUpdate = new Date(dailyFag.updatedAt);
      const isSameDay = lastUpdate.toDateString() === new Date().toDateString();

      if (isSameDay) {
        // –£–∂–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è
        const user = await models.User.findOne({
          where: { telegramId: dailyFag.userId },
        });
        const message = `–°–µ–≥–æ–¥–Ω—è üåà–ü–ò–î–û–† –¥–Ω—è - ${user.firstName} ${
          user.username ? `(@${user.username})` : ""
        })`;
        await bot.sendMessage(chatId, message);
        return;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let stats = await models.Statistics.findAll({
      where: {
        chatId: chatId,
        role: "fag",
        isActive: true, // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      },
    });

    if (stats.length === 0) {
      await bot.sendMessage(
        chatId,
        "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞."
      );
      return;
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è" –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è
    const dailyKrasava = await models.Daily.findOne({
      where: { chatId, role: "krasava" },
    });

    let krasavaSelectedToday = false;
    let krasavaUserId = null;

    if (dailyKrasava) {
      const lastUpdate = new Date(dailyKrasava.updatedAt);
      const isSameDay = lastUpdate.toDateString() === new Date().toDateString();

      if (isSameDay) {
        krasavaSelectedToday = true;
        krasavaUserId = dailyKrasava.userId;
      }
    }

    if (krasavaSelectedToday) {
      stats = stats.filter((el) => el.userId !== krasavaUserId);
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let faggotOfTheDay = stats[Math.floor(Math.random() * stats.length)];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ Statistics –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–∞—Ç–∞ –∏ —Ä–æ–ª–∏ "fag"
    let fagStat = await models.Statistics.findOne({
      where: {
        userId: faggotOfTheDay.userId,
        chatId,
        role: "fag",
      },
    });

    if (!fagStat) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å Statistics –¥–ª—è —Ä–æ–ª–∏ "fag"
      fagStat = await models.Statistics.create({
        userId: faggotOfTheDay.userId,
        chatId,
        role: "fag",
        score: 1,
      });
    } else {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await fagStat.increment({ score: 1 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Daily
    await models.Daily.upsert({
      userId: faggotOfTheDay.userId,
      chatId,
      role: "fag",
      updatedAt: new Date(),
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    const user2 = await models.User.findOne({
      where: { telegramId: faggotOfTheDay.userId },
    });

    const pidorMessages = [
      "–•–£–ô üöÄ",
      "–ü–ò–ó–î–ê ü•ü",
      "–í–´–ë–ò–†–ê–ï–ú üé≤",
      "–ü–ò–î–û–†–ê üåà",
      "–î–ù–Ø üåû",
      `–°–µ–≥–æ–¥–Ω—è üåà–ü–ò–î–û–† –¥–Ω—è - ${user2.firstName} (@${user2.username || ""})`,
    ];

    const sendMessagesWithDelay = async () => {
      for (const message of pidorMessages) {
        await bot.sendMessage(chatId, message);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await new Promise((resolve) => setTimeout(resolve, 1000)); // 1.5 —Å–µ–∫—É–Ω–¥—ã
      }
    };

    sendMessagesWithDelay();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /pidor:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏–¥–æ—Ä–∞ –¥–Ω—è.");
  }
};

module.exports = { handleFagCommand };
